// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/asynccnu/ccnubox-be/be-library/internal/biz"
	"github.com/asynccnu/ccnubox-be/be-library/internal/client"
	"github.com/asynccnu/ccnubox-be/be-library/internal/conf"
	"github.com/asynccnu/ccnubox-be/be-library/internal/data"
	"github.com/asynccnu/ccnubox-be/be-library/internal/registry"
	"github.com/asynccnu/ccnubox-be/be-library/internal/server"
	"github.com/asynccnu/ccnubox-be/be-library/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, confRegistry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	cookiePool := client.NewCookiePoolProvider()
	libraryCrawler := data.NewLibraryCrawler(logger, cookiePool)
	etcdRegistry := registry.NewRegistrarServer(confRegistry, logger)
	userServiceClient, err := client.NewClient(etcdRegistry, confRegistry, logger)
	if err != nil {
		return nil, nil, err
	}
	ccnuServiceProxy := client.NewCCNUServiceProxy(userServiceClient)
	duration := biz.NewWaitTime(confServer)
	libraryBiz := biz.NewLibraryBiz(libraryCrawler, ccnuServiceProxy, logger, duration)
	libraryService := service.NewLibraryService(libraryBiz, logger)
	grpcServer := server.NewGRPCServer(confServer, libraryService, logger)
	app := newApp(logger, grpcServer, etcdRegistry)
	return app, func() {
	}, nil
}
