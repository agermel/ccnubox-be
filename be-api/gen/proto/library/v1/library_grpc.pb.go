// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: library/v1/library.proto

package libraryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Library_GetSeat_FullMethodName           = "/library.v1.Library/GetSeat"
	Library_ReserveSeat_FullMethodName       = "/library.v1.Library/ReserveSeat"
	Library_GetSeatRecord_FullMethodName     = "/library.v1.Library/GetSeatRecord"
	Library_GetHistory_FullMethodName        = "/library.v1.Library/GetHistory"
	Library_CancelSeat_FullMethodName        = "/library.v1.Library/CancelSeat"
	Library_GetCreditPoint_FullMethodName    = "/library.v1.Library/GetCreditPoint"
	Library_GetDiscussion_FullMethodName     = "/library.v1.Library/GetDiscussion"
	Library_SearchUser_FullMethodName        = "/library.v1.Library/SearchUser"
	Library_ReserveDiscussion_FullMethodName = "/library.v1.Library/ReserveDiscussion"
	Library_CancelDiscussion_FullMethodName  = "/library.v1.Library/CancelDiscussion"
)

// LibraryClient is the client API for Library service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryClient interface {
	GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error)
	ReserveSeat(ctx context.Context, in *ReserveSeatRequest, opts ...grpc.CallOption) (*ReserveSeatResponse, error)
	GetSeatRecord(ctx context.Context, in *GetSeatRecordRequest, opts ...grpc.CallOption) (*GetSeatRecordResponse, error)
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	CancelSeat(ctx context.Context, in *CancelSeatRequest, opts ...grpc.CallOption) (*CancelSeatResponse, error)
	GetCreditPoint(ctx context.Context, in *GetCreditPointRequest, opts ...grpc.CallOption) (*GetCreditPointResponse, error)
	GetDiscussion(ctx context.Context, in *GetDiscussionRequest, opts ...grpc.CallOption) (*GetDiscussionResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	ReserveDiscussion(ctx context.Context, in *ReserveDiscussionRequest, opts ...grpc.CallOption) (*ReserveDiscussionResponse, error)
	CancelDiscussion(ctx context.Context, in *CancelDiscussionRequest, opts ...grpc.CallOption) (*CancelDiscussionResponse, error)
}

type libraryClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryClient(cc grpc.ClientConnInterface) LibraryClient {
	return &libraryClient{cc}
}

func (c *libraryClient) GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatResponse)
	err := c.cc.Invoke(ctx, Library_GetSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) ReserveSeat(ctx context.Context, in *ReserveSeatRequest, opts ...grpc.CallOption) (*ReserveSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveSeatResponse)
	err := c.cc.Invoke(ctx, Library_ReserveSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetSeatRecord(ctx context.Context, in *GetSeatRecordRequest, opts ...grpc.CallOption) (*GetSeatRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatRecordResponse)
	err := c.cc.Invoke(ctx, Library_GetSeatRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryResponse)
	err := c.cc.Invoke(ctx, Library_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) CancelSeat(ctx context.Context, in *CancelSeatRequest, opts ...grpc.CallOption) (*CancelSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSeatResponse)
	err := c.cc.Invoke(ctx, Library_CancelSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetCreditPoint(ctx context.Context, in *GetCreditPointRequest, opts ...grpc.CallOption) (*GetCreditPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreditPointResponse)
	err := c.cc.Invoke(ctx, Library_GetCreditPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) GetDiscussion(ctx context.Context, in *GetDiscussionRequest, opts ...grpc.CallOption) (*GetDiscussionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiscussionResponse)
	err := c.cc.Invoke(ctx, Library_GetDiscussion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, Library_SearchUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) ReserveDiscussion(ctx context.Context, in *ReserveDiscussionRequest, opts ...grpc.CallOption) (*ReserveDiscussionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveDiscussionResponse)
	err := c.cc.Invoke(ctx, Library_ReserveDiscussion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *libraryClient) CancelDiscussion(ctx context.Context, in *CancelDiscussionRequest, opts ...grpc.CallOption) (*CancelDiscussionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelDiscussionResponse)
	err := c.cc.Invoke(ctx, Library_CancelDiscussion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibraryServer is the server API for Library service.
// All implementations must embed UnimplementedLibraryServer
// for forward compatibility.
type LibraryServer interface {
	GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error)
	ReserveSeat(context.Context, *ReserveSeatRequest) (*ReserveSeatResponse, error)
	GetSeatRecord(context.Context, *GetSeatRecordRequest) (*GetSeatRecordResponse, error)
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	CancelSeat(context.Context, *CancelSeatRequest) (*CancelSeatResponse, error)
	GetCreditPoint(context.Context, *GetCreditPointRequest) (*GetCreditPointResponse, error)
	GetDiscussion(context.Context, *GetDiscussionRequest) (*GetDiscussionResponse, error)
	SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error)
	ReserveDiscussion(context.Context, *ReserveDiscussionRequest) (*ReserveDiscussionResponse, error)
	CancelDiscussion(context.Context, *CancelDiscussionRequest) (*CancelDiscussionResponse, error)
	mustEmbedUnimplementedLibraryServer()
}

// UnimplementedLibraryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibraryServer struct{}

func (UnimplementedLibraryServer) GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeat not implemented")
}
func (UnimplementedLibraryServer) ReserveSeat(context.Context, *ReserveSeatRequest) (*ReserveSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveSeat not implemented")
}
func (UnimplementedLibraryServer) GetSeatRecord(context.Context, *GetSeatRecordRequest) (*GetSeatRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatRecord not implemented")
}
func (UnimplementedLibraryServer) GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedLibraryServer) CancelSeat(context.Context, *CancelSeatRequest) (*CancelSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSeat not implemented")
}
func (UnimplementedLibraryServer) GetCreditPoint(context.Context, *GetCreditPointRequest) (*GetCreditPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditPoint not implemented")
}
func (UnimplementedLibraryServer) GetDiscussion(context.Context, *GetDiscussionRequest) (*GetDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscussion not implemented")
}
func (UnimplementedLibraryServer) SearchUser(context.Context, *SearchUserRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedLibraryServer) ReserveDiscussion(context.Context, *ReserveDiscussionRequest) (*ReserveDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveDiscussion not implemented")
}
func (UnimplementedLibraryServer) CancelDiscussion(context.Context, *CancelDiscussionRequest) (*CancelDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDiscussion not implemented")
}
func (UnimplementedLibraryServer) mustEmbedUnimplementedLibraryServer() {}
func (UnimplementedLibraryServer) testEmbeddedByValue()                 {}

// UnsafeLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServer will
// result in compilation errors.
type UnsafeLibraryServer interface {
	mustEmbedUnimplementedLibraryServer()
}

func RegisterLibraryServer(s grpc.ServiceRegistrar, srv LibraryServer) {
	// If the following call pancis, it indicates UnimplementedLibraryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Library_ServiceDesc, srv)
}

func _Library_GetSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetSeat(ctx, req.(*GetSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_ReserveSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).ReserveSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_ReserveSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).ReserveSeat(ctx, req.(*ReserveSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetSeatRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetSeatRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetSeatRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetSeatRecord(ctx, req.(*GetSeatRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_CancelSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).CancelSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_CancelSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).CancelSeat(ctx, req.(*CancelSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetCreditPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetCreditPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetCreditPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetCreditPoint(ctx, req.(*GetCreditPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_GetDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).GetDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_GetDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).GetDiscussion(ctx, req.(*GetDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_SearchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).SearchUser(ctx, req.(*SearchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_ReserveDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).ReserveDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_ReserveDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).ReserveDiscussion(ctx, req.(*ReserveDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Library_CancelDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibraryServer).CancelDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Library_CancelDiscussion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibraryServer).CancelDiscussion(ctx, req.(*CancelDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Library_ServiceDesc is the grpc.ServiceDesc for Library service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Library_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.v1.Library",
	HandlerType: (*LibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeat",
			Handler:    _Library_GetSeat_Handler,
		},
		{
			MethodName: "ReserveSeat",
			Handler:    _Library_ReserveSeat_Handler,
		},
		{
			MethodName: "GetSeatRecord",
			Handler:    _Library_GetSeatRecord_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _Library_GetHistory_Handler,
		},
		{
			MethodName: "CancelSeat",
			Handler:    _Library_CancelSeat_Handler,
		},
		{
			MethodName: "GetCreditPoint",
			Handler:    _Library_GetCreditPoint_Handler,
		},
		{
			MethodName: "GetDiscussion",
			Handler:    _Library_GetDiscussion_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _Library_SearchUser_Handler,
		},
		{
			MethodName: "ReserveDiscussion",
			Handler:    _Library_ReserveDiscussion_Handler,
		},
		{
			MethodName: "CancelDiscussion",
			Handler:    _Library_CancelDiscussion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "library/v1/library.proto",
}
